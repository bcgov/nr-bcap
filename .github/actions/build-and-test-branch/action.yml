name: 'Build and test branch'
description: 'Builds and tests a branch'
inputs:
  branch-type:
    description: 'String denoting either `target` or `feature` branch'
    required: true
  project-name:
    description: 'String denoting the name of the project'
    required: true
  secrets:
    description: 'Secrets from main.yml as JSON'
runs:
  using: 'composite'
  steps:
    - name: Copy github_settings to bcap settings
      run: |
        cp .github/github_settings.py bcap/settings.py
      shell: bash

    - name: Install Java, GDAL, and other system dependencies
      run: |
        sudo apt update
        sudo apt-get install libxml2-dev libpq-dev openjdk-8-jdk libgdal-dev libxslt-dev
        echo Postgres and ES dependencies installed
      shell: bash

    - name: Set up Elasticsearch
      uses: ankane/setup-elasticsearch@v1
      with:
        elasticsearch-version: 8

    - name: Install uv
      uses: astral-sh/setup-uv@v5

#    - name: Install Python packages
#      run: |
#        uv pip install --prerelease=allow --system '.[dev]'
#      shell: bash

    - name: Sync deps (incl. dev group)
      run: uv sync --prerelease=allow --group dev
      shell: bash

    - name: Ensure frontend configuration files exist
      run: uv run python manage.py check
      shell: bash

    - name: Install Arches applications
      uses: ./.github/actions/install-arches-applications
      with:
        secrets: ${{ inputs.secrets }}

    - name: Install frontend dependencies
      run: |
          npm install && \
          ls -l node_modules
      shell: bash

#    - name: Webpack frontend files
#      run: |
#          npm run build_test
#      shell: bash
#
#    - name: Webpack frontend files
#      shell: bash
#      run: |
#        # Derive the Arches JS path from your metadata
#        ROOT_DIR=$(jq -r '.ROOT_DIR' frontend_configuration/webpack-metadata.json)
#        ARJS="$ROOT_DIR/app/media/js"
#
#        # Clean up any old/bad links from previous runs
#        mkdir -p node_modules
#        rm -f node_modules/arches node_modules/viewmodels node_modules/utils node_modules/bindings node_modules/templates node_modules/views
#
#        # Symlink Arches AMD namespaces into node_modules so bare imports resolve
#        # 'arches' must target the file arches.js
#        ln -s "$ARJS/arches.js"  node_modules/arches
#        # Point these namespaces at their respective directories
#        ln -s "$ARJS/viewmodels" node_modules/viewmodels
#        ln -s "$ARJS/utils"      node_modules/utils
#        ln -s "$ARJS/bindings"   node_modules/bindings
#        ln -s "$ARJS/templates"  node_modules/templates
#        ln -s "$ARJS/views"      node_modules/views
#
#        # (Optional) quick debug
#        ls -l node_modules | sed -n '1,200p'
#
#        # Keep your lint + type checks
#        npm run eslint:check
#        npm run ts:check
#
#        # Build (no special flags needed now)
#        npx webpack --config ./webpack/webpack.config.dev.js --env test=true

    - name: Check frontend formatting with prettier
      run: |
        npm run prettier:check
      shell: bash

    - name: Check backend formatting with black
      run: uv run black . --check --extend-exclude=node_modules
      shell: bash

    - name: Check line endings on all but ontology (.xml) files
      run: |
        ! git ls-files --eol | grep -v '.xml' | grep 'w/crlf\|w/mixed'
      shell: bash

    - name: Run frontend tests
      run: |
        npm run vitest
        mv coverage/frontend/coverage.xml ${{ inputs.branch-type }}_branch_frontend_coverage.xml
      shell: bash

    - name: Check for missing migrations
      run: uv run python manage.py makemigrations --check
      shell: bash

    - name: Ensure previous Python coverage data is erased
      run: uv run coverage erase
      shell: bash

    - name: Run Python unit tests
      run: uv run python -W default::DeprecationWarning -m coverage run manage.py test tests --settings="tests.test_settings"
      shell: bash

    - name: Generate Python report coverage
      run: |
        uv run coverage report
        uv run coverage json
        mv coverage/python/coverage.json ${{ inputs.branch-type }}_branch_python_coverage.json
      shell: bash

    - name: Upload frontend coverage report as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.branch-type }}-branch-frontend-coverage-report
        path: ${{ inputs.branch-type }}_branch_frontend_coverage.xml
        overwrite: true

    - name: Upload Python coverage report as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.branch-type }}-branch-python-coverage-report-py${{ matrix.python-version }}
        path: ${{ inputs.branch-type }}_branch_python_coverage.json
        overwrite: true
