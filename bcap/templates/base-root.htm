<!--
ARCHES - a program developed to inventory and manage immovable cultural heritage.
Copyright (C) 2013 J. Paul Getty Trust and World Monuments Fund

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
-->
{% load static %}
{% load webpack_loader %}
{% load webpack_static from webpack_loader %}
{% load render_bundle from webpack_loader %}


<!DOCTYPE html>
<!--[if IE 8]>
<html lang="en" class="ie8"> <![endif]-->
<!--[if IE 9]>
<html lang="en" class="ie9"> <![endif]-->
<!--[if !IE]><!-->
<html lang="en"> <!--<![endif]-->

{% block head %}
<head>
    {% if app_settings.GOOGLE_ANALYTICS_TRACKING_ID != None %}
    <script async
            src="https://www.googletagmanager.com/gtag/js?id={{app_settings.GOOGLE_ANALYTICS_TRACKING_ID}}"></script>
    <script>
        window.dataLayer = window.dataLayer || [];

        function gtag() {
            dataLayer.push(arguments);
        }

        gtag("js", new Date());
        gtag("config", "{{app_settings.GOOGLE_ANALYTICS_TRACKING_ID}}");
    </script>
    {% endif %}
    <title>
        {% block title %}{% endblock title %}
    </title>

    <!-- Meta -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="">
    <meta name="author" content="">

    <link rel="shortcut icon" href="{% webpack_static 'favicons/favicon.ico' %}" type="image/x-icon" />
    <link rel="apple-touch-icon" href="{% webpack_static 'favicons/apple-touch-icon.png' %}" />
    <link rel="apple-touch-icon" sizes="76x76" href="{% webpack_static 'favicons/apple-touch-icon-76x76.png' %}" />
    <link rel="apple-touch-icon" sizes="120x120" href="{% webpack_static 'favicons/apple-touch-icon-120x120.png' %}" />
    <link rel="apple-touch-icon" sizes="152x152" href="{% webpack_static 'favicons/apple-touch-icon-152x152.png' %}" />
    <link rel="apple-touch-icon" sizes="180x180" href="{% webpack_static 'favicons/apple-touch-icon-180x180.png' %}" />

    {% block css %}
    <link rel="stylesheet" href="{% webpack_static 'node_modules/normalize.css/normalize.css' %}" />
    <link rel="stylesheet" href="{% webpack_static 'node_modules/font-awesome/css/font-awesome.min.css' %}" />
    <link rel="stylesheet" href="{% webpack_static 'node_modules/primeicons/primeicons.css' %}" />
    {% endblock css %}
</head>
{% endblock head %}

{% block body_content %}
<body dir="{{ app_settings.ACTIVE_LANGUAGE_DIR }}" {% block body_attributes %}{% endblock %}>
{% block loading_mask %}
{% endblock loading_mask %}

{% block body %}
{% endblock body %}
</body>
{% endblock body_content %}

{% block javascript %}
{% block pre_require_js %}
{% endblock pre_require_js %}

{% block arches_modules %}
{% include "arches_urls.htm" %}
{% endblock arches_modules %}

{% if main_script %}
<!-- This override allows the Vue files to be hosed by Vite while allowing the rest
of the site to continue to use the webpack loader (for now). This is to help with
the development of the custom pages -->
<!-- PRELUDE: put this BEFORE the old bundles -->
<script>
    (function() {
        // Queueing stub: KO binding will call this before Vite is ready
        window.__bcap_vue_queue__ = [];
        window.__bcapMountVueComponent = function() {
            window.__bcap_vue_queue__.push([].slice.call(arguments));
        };

        // Patch KO binding as soon as KO shows up (no DOMContentLoaded hacks)
        function patchKo(ko) {
            try {
                if (ko && !ko.bindingHandlers.__bcapVuePatched) {
                    var base = ko.bindingHandlers.vueComponent || {};
                    ko.bindingHandlers.vueComponent = {
                        init: function(el, valueAccessor, allBindings, vm, ctx) {
                            // Delegate to (stub or real) global mount
                            return window.__bcapMountVueComponent(
                                ko, el, valueAccessor, allBindings, vm, ctx, base.init
                            );
                        }
                    };
                    ko.bindingHandlers.__bcapVuePatched = true;
                    console.log("[BCAP] KO vueComponent binding patched");
                }
            } catch (e) {
                console.warn("[BCAP] patchKo error", e);
            }
        }

        if ("ko" in window) {
            patchKo(window.ko);
        } else {
            Object.defineProperty(window, "ko", {
                configurable: true,
                get: function() {
                    return this.__bcap_ko__;
                },
                set: function(v) {
                    this.__bcap_ko__ = v;
                    patchKo(v);
                }
            });
        }
    })();
</script>

{# Grab just the JS files for the entry you currently render via {% render_bundle main_script %} #}
{% get_files main_script as js_files %}

{# 1) print every Webpack script EXCEPT the last (the main entry) #}
{% for f in js_files %}
{% if not forloop.last %}
<script src="{{ f.url }}"></script>
{% endif %}
{% endfor %}

{# 2) inject Vite #}
{% if USE_VITE %}
<script type="module" src="/bcap/@vite/@vite/client"></script>
<script type="module" src="/bcap/@vite/bcap/vite-entries/bcap-site.entry.js"></script>
{% endif %}


{# 3) print the final Webpack entry last #}
{% with js_files|slice:"-1:" as last %}
{% for f in last %}
<script src="{{ f.url }}"></script>
{% endfor %}
{% endwith %}

{% endif %}
{% endblock javascript %}

</html>